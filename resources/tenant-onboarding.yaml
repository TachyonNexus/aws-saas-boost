---
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: 2010-09-09
Description: AWS SaaS Boost Tenant Onboarding
Parameters:
  Environment:
    Description: Environment (test, uat, prod, etc.)
    Type: String
  DomainName:
    Description: The hosted zone domain name
    Type: String
  HostedZoneId:
    Description: The hosted zone for this domain name
    Type: String
  SSLCertificateArn:
    Description: The ACM ARN of the SSL certificate for the application's domain
    Type: String
    Default: ''
  TenantId:
    Description: The GUID for the tenant
    Type: String
  TenantSubDomain:
    Description: The subdomain for this tenant
    Type: String
  CidrPrefix:
    Description: Prefix of Cidr for this tenant such as 10.1, 10.2 etc.
    Type: String
  Tier:
    Description: The tier this tenant is onboading into
    Type: String
    Default: ''
  ElasticsearchVersion:
    Default: '7.10'
    Type: String
    ConstraintDescription: Must be an allowed AWS ES version (Major.Minor)
    AllowedValues: [ '7.10', '7.9', '7.8', '7.7', '7.4', '7.1', '6.8', '6.7', '6.5', '6.4', '6.3', '6.2', '6.0', '5.6', '5.5' ]
  ElasticsearchMasterInstanceType:
    Description: Instance type for master nodes.
    Type: String
    Default: t2.small.elasticsearch
  ElasticsearchDataInstanceType:
    Description: Instance type for data nodes.
    Type: String
    Default: t3.medium.elasticsearch
  NumberOfMasterNodes:
    Description: How many dedicated master nodes you want to have. 3 is recommended.
    Type: Number
    Default: 3
    AllowedValues:
      - 3
      - 5
  NumberOfDataNodes:
    Description: How many data nodes you want to have. Multiples of your number of availability zones (2) is recommended.
    Type: Number
    Default: 2
    MinValue: 1
    MaxValue: 20
  CustomEndpointEnabled:
    Type: String
    AllowedValues: [ 'true', 'false' ]
    Default: 'true'
  EnforceHTTPS:
    Type: String
    AllowedValues: [ 'true', 'false' ]
    Default: 'true'
  ESPortHTTP:
    Type: String
    Default: '80'
  ESPortHTTPS:
    Type: String
    Default: '443'
Conditions:
  HasDomainName: !Not [!Equals [!Ref DomainName, '']]
  HasHostedZone: !Not [!Equals [!Ref HostedZoneId, '']]
  HasSubDomainName: !Not [!Equals [!Ref TenantSubDomain, '']]
  HasCertificate: !Not [!Equals [!Ref SSLCertificateArn, '']]
  NoCertificate: !Equals [!Ref SSLCertificateArn, '']
  CreateSubDomainAlias: !And
    - !Condition HasDomainName
    - !Condition HasHostedZone
    - !Condition HasSubDomainName
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Sub ${CidrPrefix}.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Tenant
          Value: !Ref TenantId
        - Key: Name
          Value:
            Fn::Join: ['', ['sb-', !Ref Environment, '-tenant-', !Select [0, !Split ['-', !Ref TenantId]]]]
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Tenant
          Value: !Ref TenantId
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Tenant
          Value: !Ref TenantId
        - Key: Name
          Value:
            Fn::Join: ['', ['sb-', !Ref Environment, '-public-tenant-', !Select [0, !Split ['-', !Ref TenantId]]]]
  RoutePublic:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  SubnetPublicA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub ${CidrPrefix}.32.0/19
      Tags:
        - Key: Tenant
          Value: !Ref TenantId
        - Key: Name
          Value:
            Fn::Join: ['', ['sb-', !Ref Environment, '-public-az1-tenant-', !Select [0, !Split ['-', !Ref TenantId]]]]
  SubnetPublicARouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublicA
      RouteTableId: !Ref RouteTablePublic
  SubnetPublicB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub ${CidrPrefix}.96.0/19
      Tags:
        - Key: Tenant
          Value: !Ref TenantId
        - Key: Name
          Value:
            Fn::Join: ['', ['sb-', !Ref Environment, '-public-az2-tenant-', !Select [0, !Split ['-', !Ref TenantId]]]]
  SubnetPublicBRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublicB
      RouteTableId: !Ref RouteTablePublic
  SubnetPrivateA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub ${CidrPrefix}.0.0/19
      Tags:
        - Key: Tenant
          Value: !Ref TenantId
        - Key: Name
          Value:
            Fn::Join: ['', ['sb-', !Ref Environment, '-private-az1-tenant-', !Select [0, !Split ['-', !Ref TenantId]]]]
  SubnetPrivateB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub ${CidrPrefix}.64.0/19
      Tags:
        - Key: Tenant
          Value: !Ref TenantId
        - Key: Name
          Value:
            Fn::Join: ['', ['sb-', !Ref Environment, '-private-az2-tenant-', !Select [0, !Split ['-', !Ref TenantId]]]]
  RouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Tenant
          Value: !Ref TenantId
        - Key: Name
          Value:
            Fn::Join: ['', ['sb-', !Ref Environment, '-private-tenant-', !Select [0, !Split ['-', !Ref TenantId]]]]
  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPrivateA
      RouteTableId: !Ref RouteTablePrivate
  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPrivateB
      RouteTableId: !Ref RouteTablePrivate
  # Attach tenant VPC to TGW
  TenantTGWAttachment:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties:
      SubnetIds:
        - !Ref SubnetPrivateA
        - !Ref SubnetPrivateB
      Tags:
        - Key: Tenant
          Value:
            !Ref TenantId
        - Key: Name
          Value:
            Fn::Join: ['', ['sb-', !Ref Environment, '-tenant-', !Select [0, !Split ['-', !Ref TenantId]]]]
      TransitGatewayId:
        Fn::Join: ['', ['{{resolve:ssm:/saas-boost/', !Ref Environment, '/TRANSIT_GATEWAY}}']]
      VpcId: !Ref VPC
  # Add the route from the egress VPC back to this tenant's CIDR range and attachment
  TenantRoute:
    Type: AWS::EC2::TransitGatewayRoute
    Properties:
      DestinationCidrBlock: !Sub ${CidrPrefix}.0.0/16
      TransitGatewayAttachmentId: !Ref TenantTGWAttachment
      TransitGatewayRouteTableId:
        Fn::Join: ['', ['{{resolve:ssm:/saas-boost/', !Ref Environment, '/EGRESS_ROUTE_TABLE}}']]
  # Associate the route table to this tenant's TGW Attachment
  TenantVpcTgwAssociation:
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    Properties:
      TransitGatewayAttachmentId: !Ref TenantTGWAttachment
      TransitGatewayRouteTableId:
        Fn::Join: ['', ['{{resolve:ssm:/saas-boost/', !Ref Environment, '/TRANSIT_GATEWAY_ROUTE_TABLE}}']]
  # Update VPC route tables to point towards transit gateway for appropriate target CIDR ranges
  UpdateRouteTable:
    Type: AWS::EC2::Route
    DependsOn: TenantTGWAttachment
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      DestinationCidrBlock: 0.0.0.0/0
      TransitGatewayId:
        Fn::Join: ['', ['{{resolve:ssm:/saas-boost/', !Ref Environment, '/TRANSIT_GATEWAY}}']]
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName:
        Fn::Join: ['', ['sb-', !Ref Environment, '-tenant-', !Select [0, !Split ['-', !Ref TenantId]]]]
      Tags:
        - Key: Tenant
          Value: !Ref TenantId
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Join: ['', ['sb-', !Ref Environment, '-tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-alb-sg']]
      GroupDescription: HTTP/S access to the load balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 50051
          ToPort: 50051
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Join: ['', ['sb-', !Ref Environment, '-tenant-', !Select [0, !Split ['-', !Ref TenantId]], '-ecs-sg']]
      GroupDescription: Access to containers
      VpcId: !Ref VPC
  ECSSecurityGroupAlbIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow traffic from the ALB security group
      GroupId: !Ref ECSSecurityGroup
      SourceSecurityGroupId: !Ref ALBSecurityGroup
      IpProtocol: '-1'
  ECSSecurityGroupEcsIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow traffic from other resources in the ECS security group
      GroupId: !Ref ECSSecurityGroup
      SourceSecurityGroupId: !Ref ECSSecurityGroup
      IpProtocol: '-1'
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: AttachGateway
    Properties:
      Name:
        Fn::Join: ['', ['sb-', !Ref Environment, '-tenant-', !Select [0, !Split ['-', !Ref TenantId]]]]
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '4000' # set to max time to prevent gRPC channels from closing
        - Key: access_logs.s3.enabled
          Value: 'true'
        - Key: access_logs.s3.bucket
          Value:
            Fn::Join: ['', ['{{resolve:ssm:/saas-boost/', !Ref Environment, '/ACCESS_LOGS_BUCKET}}']]
        - Key: access_logs.s3.prefix
          Value: 'access-logs'
      Subnets:
        - !Ref SubnetPublicA
        - !Ref SubnetPublicB
      SecurityGroups: [!Ref ALBSecurityGroup]
      Tags:
        - Key: Tenant
          Value: !Ref TenantId
  RecordSetAlias:
     Type: AWS::Route53::RecordSet
     Condition: CreateSubDomainAlias
     Properties:
       HostedZoneId: !Ref HostedZoneId
       Name: !Sub ${TenantSubDomain}.${DomainName}
       Type: 'A'
       AliasTarget:
         DNSName: !Sub dualstack.${ApplicationLoadBalancer.DNSName}
         HostedZoneId: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID
         EvaluateTargetHealth: false
  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name:
        Fn::Join: ['', ['sb-', !Ref Environment, '-tenant-', !Select [0, !Split ['-', !Ref TenantId]]]]
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
  DefaultTargetGroupGrpc:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name:
        Fn::Join: ['', ['sb-', !Ref Environment, '-tenant-', !Select [0, !Split ['-', !Ref TenantId]], "-grpc"]]
      VpcId: !Ref VPC
      Port: 50051
      Protocol: HTTP
      ProtocolVersion: GRPC
  GrpcListener:
    Condition: HasCertificate
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      DefaultActions:
        - TargetGroupArn: !Ref DefaultTargetGroupGrpc
          Type: forward
      Port: 50051
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref SSLCertificateArn
  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: NoCertificate
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup
  HttpsListener:
    Condition: HasCertificate
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup
      Certificates:
        - CertificateArn: !Ref SSLCertificateArn
  RedirectToHttpsListener:
    Condition: HasCertificate
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: 443
            Host: '#{host}'
            Path: '/#{path}'
            Query: '#{query}'
            StatusCode: HTTP_301
  # ElasticSearch Extension
  es:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://{{resolve:ssm:/saas-boost/${Environment}/SAAS_BOOST_BUCKET}}.s3.amazonaws.com/tenant-onboarding-es.yaml'
      TimeoutInMinutes: 30
      Parameters:
        CustomEndpointEnabled: !Ref CustomEndpointEnabled
        TenantId: !Ref TenantId
        TenantSubDomain: !Ref TenantSubDomain
        DomainName: !Ref DomainName
        ElasticsearchVersion: !Ref ElasticsearchVersion
        ECSSecurityGroup: !Ref ECSSecurityGroup
        ElasticsearchDataInstanceType: !Ref ElasticsearchDataInstanceType
        NumberOfDataNodes: !Ref NumberOfDataNodes
        EnforceHTTPS: !Ref EnforceHTTPS
        ElasticsearchName:
          Fn::Join: ['', [!Sub 'sb-${Environment}-', !Ref TenantSubDomain, '-es' ]]
        Username:
          !Join ['', ['esuser', !Select [0, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
        Password:
          !Join ['-', ['E0', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
  # Onboarding service is responsible for invoking create stack for as many
  # services as this application has
Outputs:
  LoadBalancer:
    Description: Full name for this tenant's application load balancer
    Value: !GetAtt ApplicationLoadBalancer.LoadBalancerFullName
  DNSName:
    Description: DNSName for this tenant's application load balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
  ESConnection:
    Description: 'Elasticsearch credentials and host in the format <username>:<port>@<endpoint>:<port>'
    Value:
      Fn::Join: ['', [!GetAtt es.Outputs.ESUsername, ':', !GetAtt es.Outputs.ESPassword, '@', !GetAtt es.Outputs.ESDomainEndpoint, ':', !GetAtt es.Outputs.ESClusterPort]]
...
